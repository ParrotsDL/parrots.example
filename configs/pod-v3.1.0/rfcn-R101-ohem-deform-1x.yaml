version: v3.0.0
num_classes: &num_classes 21
class_names: &class_names [
        "__background__",
        "aeroplane", "bicycle", "bird", "boat",
        "bottle", "bus", "car", "cat", "chair",
        "cow", "diningtable", "dog", "horse",
        "motorbike", "person", "pottedplant",
        "sheep", "sofa", "train", "tvmonitor"]

flip: &flip
 type: flip
 kwargs:
   flip_p: 0.5

resize: &resize
 type: keep_ar_resize
 kwargs:
   scales: [600]
   max_size: 1000

to_tensor: &to_tensor
  type: to_tensor

normalize: &normalize
 type: normalize
 kwargs:
   mean: [0.485, 0.456, 0.406] # ImageNet pretrained statics
   std: [0.229, 0.224, 0.225]

dataset:
  train:
    dataset:
      type: pascal_voc
      kwargs:
        source: voc_train  # dataset id
        meta_file: /mnt/lustre/share/DSK/datasets/VOC07+12/ImageSets/Main/trainval.txt
        image_reader:
          type: ceph_opencv
          kwargs:
            # image_dir: /mnt/lustre/share/DSK/datasets/VOC07+12/JPEGImages
            image_dir: s3://parrots_model_data/DSK/datasets/VOC07+12/JPEGImages
            color_mode: RGB
        transformer: [*flip, *resize, *to_tensor, *normalize]
  test:
    dataset:
      type: pascal_voc
      kwargs:
        source: voc_val
        meta_file: /mnt/lustre/share/DSK/datasets/VOC07+12/ImageSets/Main/test.txt
        image_reader:
          type: ceph_opencv
          kwargs:
            # image_dir: /mnt/lustre/share/DSK/datasets/VOC07+12/JPEGImages
            image_dir: s3://parrots_model_data/DSK/datasets/VOC07+12/JPEGImages
            color_mode: RGB
        transformer: [*resize, *to_tensor, *normalize]
        evaluator:
          type: VOC               # choices = {'COCO', 'VOC', 'MR'}
          kwargs:
            gt_file: /mnt/lustre/share/DSK/datasets/VOC07+12/ImageSets/Main/test.txt
            iou_thresh: 0.5
  batch_sampler:
    type: aspect_ratio_group
    kwargs:
      sampler:
        type: dist
        kwargs: {}
      batch_size: 2
      aspect_grouping: [1,]
  dataloader:
    type: base
    kwargs:
      num_workers: 4
      alignment: 1


trainer: # Required.
  max_epoch: 19              # total epochs for the training
  test_freq: 19
  optimizer:                 # optimizer = SGD(params,lr=0.001,momentum=0.9,weight_decay=0.0001)
    type: SGD
    kwargs:
      lr: 0.00125
      momentum: 0.9
      weight_decay: 0.0001
  lr_scheduler:              # lr_scheduler = MultStepLR(optimizer, milestones=[9,14],gamma=0.1)
    warmup_epochs: 1         # set to be 0 to disable warmup. When warmup,  target_lr = init_lr * total_batch_size
    type: MultiStepLR
    kwargs:
      milestones: [16,18]     # epochs to decay lr
      gamma: 0.1             # decay rate

saver: # Required.
  save_dir: checkpoints/rfcn-R101-ohem-deform-1x     # dir to save checkpoints
  pretrain_model: /mnt/lustre/share/DSK/model_zoo/pytorch/imagenet/resnet101-5d3b4d8f.pth
  results_dir: results_dir  # dir to save detection results. i.e., bboxes, masks, keypoints
  auto_resume: False  # find last checkpoint from save_dir and resume from it automatically
                     # this option has the highest priority (auto_resume > opts > resume_model > pretrain_model)



hooks:
  - type: auto_checkpoint
  - type: train_val_logger
    kwargs: 
      freq: 10
      skip_first_k: 5
      logdir: log
      summary_writer: pavi

net:
  - name: backbone              # backbone = resnet50(frozen_layers, out_layers, out_strides)
    type: pod.models.backbones.resnet101
    kwargs:
      frozen_layers: [0,1]     # layer0...1 is fixed
      out_layers: [4]          # layer1...4, commonly named Conv2...5
      out_strides: [16]        # tell the strides of output features
      normalize:
        type: freeze_bn
      initializer:
        method: msra
      layer_deform: [False, False, False, False, all]
  - name: roi_head
    prev: backbone
    type: pod.models.heads.roi_head.NaiveRPN
    kwargs:
      feat_planes: 512      # channels of intermediate conv
      num_classes: 2        # for rpn, it's 2; for RetinaNet, it's 81
      initializer:
        method: normal
        std: 0.01
      cfg:
        cls_loss:
          type: softmax_cross_entropy
          kwargs:
            class_dim: -1  # last dim is the class dim
        loc_loss:
          type: smooth_l1_loss
          kwargs:
            sigma: 3.0
        anchor_generator:
          type: hand_craft
          kwargs:
            anchor_ratios: [0.5,1,2]    # anchor strides are provided as feature strides by feature extractor
            anchor_scales: [8,16,32]    # scale of anchors relative to feature map
        roi_supervisor:
          type: rpn
          kwargs:
            allowed_border: 0
            matcher:
              type: max_iou
              kwargs:
                positive_iou_thresh: 0.7
                negative_iou_thresh: 0.3
                ignore_iou_thresh:   0.5
                allow_low_quality_match: True
                low_quality_thresh: 0.1  # !this option is not supported yet, but we have future plan
            sampler:
              type: naive
              kwargs:
                batch_size: 256
                positive_percent: 0.5
        train:
          roi_predictor:
            type: base
            kwargs:
              pre_nms_score_thresh: 0.0
              pre_nms_top_n: 12000
              post_nms_top_n: 2000
              roi_min_size: 0
              nms:
                type: naive
                nms_iou_thresh: 0.7
        test:
          roi_predictor:
            type: base
            kwargs:
              pre_nms_score_thresh: 0.0
              pre_nms_top_n: 6000
              post_nms_top_n: 300
              roi_min_size: 0
              nms:
                type: naive
                nms_iou_thresh: 0.7
  - name: bbox_head
    prev: backbone
    type: pod.models.heads.bbox_head.RFCN
    kwargs:
      feat_planes: 1024
      num_classes: *num_classes                 # number of classification classes
      initializer:
        method: msra
      cfg:
        cls_loss:
          type: softmax_cross_entropy
          kwargs:
            class_dim: -1  # last dim is the class dim
        loc_loss:
          type: smooth_l1_loss
          kwargs:
            sigma: 1.0
        roipooling:
          method: 'psroipool'      # choices=['roialignpool', 'psroipool', 'roipool', 'psroimaskpool']. note that 'psroipool' is for RFCN head
          pool_size: 7
        bbox_normalize: &bbox_norm
          means: [0, 0, 0, 0]         # statics to normalize localization predictions.
          stds: [0.1, 0.1, 0.2, 0.2]
        share_location: &share_location False         # is share location in bbox regression for all classes
        add_relu_after_feature_conv: False            # add relu after feature conv will bring ~0.3 precision drop
        ohem:
          batch_size: 512
        bbox_supervisor:
          type: faster
          kwargs:
            bbox_normalize: *bbox_norm
            matcher:
              type: max_iou
              kwargs:
                ignore_iou_thresh: 0.5          # Required if provide ignore_regions
                positive_iou_thresh: 0.5
                negative_iou_thresh: 0.5
                allow_low_quality_match: False  # positive if a anchor has highest iou with any gt
            sampler:
              type: keep_all
              kwargs: {}
        bbox_predictor:
          type: faster
          kwargs:
            bbox_normalize: *bbox_norm
            share_location: *share_location
            nms:
              type: naive
              nms_iou_thresh: 0.3
            bbox_score_thresh: 0.0
            top_n: 100
