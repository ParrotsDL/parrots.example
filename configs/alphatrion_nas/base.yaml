project: bignas_vbr
pg_run: true
wait_tensorboard: 5
mp_method: spawn
partition: Test
srun_extra_args: ''
gen_run_file: run.sh

seed: 1024
local_batch_size: 32
num_classes: 1000
num_sub_epochs: 1
resume: ../checkpoint/latest.pth
label_smooth: 0.1

imagenet_train_root: /mnt/lustre/share/images/train
imagenet_valid_root: /mnt/lustre/share/images/val

data:
    maxlen: null
    loader_class: alphatrion
    origin_train:
        imglist_type: ListImglist
        imglist_path: /mnt/lustre/share/images/meta/train.txt
        root: '@{imagenet_train_root}'
        reader: MemcachedReader
        skip_broken: false
        dataset_debug_kwargs: 
            maxlen: '@{data.maxlen}'
            dummy_read: false
            dummy_size: null
        num_sub_epochs: '@{num_sub_epochs}'
        shuffle: true
        finegrain_factor: 1000
        seed: '@{seed}'
        local_batch_size: '@{local_batch_size}'
        num_workers: 2
        transform_image:
            name: TrainImagenet
            image_size: '@{image_size}'
            partial: false
        transform_extra:
            name: SmoothSingleLabel
            num_classes: '@{num_classes}'
            epsilon: '@{label_smooth}'
        transform_batch:
            name: cuda_remain_mixup
            alpha: 0.2
    origin_valid:
        imglist_type: ListImglist
        imglist_path: /mnt/lustre/share/images/meta/val.txt
        root: '@{imagenet_valid_root}'
        reader: MemcachedReader
        skip_broken: false
        dataset_debug_kwargs:
            maxlen: '@{data.maxlen}'
            dummy_read: false
            dummy_size: null
        num_sub_epochs: 1
        shuffle: false
        finegrain_factor: 1000
        seed: '@{seed}'
        local_batch_size: '@{local_batch_size}'
        num_workers: 2
        transform_image:
            name: ValidImagenet
            image_size: '@{image_size}'
            partial: false
        transform_extra:
            name: SmoothSingleLabel
            num_classes: '@{num_classes}'
            epsilon: '@{label_smooth}'
        transform_batch:
            name: cuda_remain
    nas_train:
        imglist_type: ListImglist
        imglist_path: /mnt/lustre/share_data/wangshiguang/imglist/imagenet/nas_train.txt
        root: '@{imagenet_train_root}'
        reader: MemcachedReader
        skip_broken: false
        dataset_debug_kwargs: 
            maxlen: '@{data.maxlen}'
            dummy_read: false
            dummy_size: null
        num_sub_epochs: '@{num_sub_epochs}'
        shuffle: true
        finegrain_factor: 1000
        seed: '@{seed}'
        local_batch_size: '@{local_batch_size}'
        num_workers: 2
        transform_image:
            name: TrainImagenet
            image_size: '@{image_size}'
            partial: false
        transform_extra:
            name: SmoothSingleLabel
            num_classes: '@{num_classes}'
            epsilon: '@{label_smooth}'
        transform_batch:
            name: cuda_remain_mixup
            alpha: 0.2
    adabn:
        imglist_type: ListImglist
        imglist_path: /mnt/lustre/share_data/wangshiguang/imglist/imagenet/nas_train_8000.txt
        root: '@{imagenet_train_root}'
        reader: MemcachedReader
        skip_broken: false
        dataset_debug_kwargs: 
            maxlen: '@{data.maxlen}'
            dummy_read: false
            dummy_size: null
        num_sub_epochs: 1
        shuffle: true
        finegrain_factor: 1000
        seed: '@{seed}'
        local_batch_size: 50
        num_workers: 2
        transform_image:
            name: TrainImagenet
            image_size: '@{image_size}'
            partial: false
        transform_extra:
            name: SmoothSingleLabel
            num_classes: '@{num_classes}'
            epsilon: '@{label_smooth}'
        transform_batch:
            name: cuda_remain_mixup
            alpha: 0.2
    nas_valid:
        imglist_type: ListImglist
        imglist_path: /mnt/lustre/share_data/wangshiguang/imglist/imagenet/nas_valid.txt
        root: '@{imagenet_train_root}'
        reader: MemcachedReader
        skip_broken: false
        dataset_debug_kwargs:
            maxlen: '@{data.maxlen}'
            dummy_read: false
            dummy_size: null
        num_sub_epochs: 1
        shuffle: false
        finegrain_factor: 1000
        seed: '@{seed}'
        local_batch_size: '@{local_batch_size}'
        num_workers: 2
        transform_image:
            name: ValidImagenet
            image_size: '@{image_size}'
            partial: false
        transform_extra:
            name: SmoothSingleLabel
            num_classes: '@{num_classes}'
            epsilon: '@{label_smooth}'
        transform_batch:
            name: cuda_remain

optimizer:
    names: [main]
    main:
        name: SGD
        kwargs:
            lr: 0 # 交给scheduler控制
            weight_decay: 0.0001
            momentum: 0.9
            nesterov: true
        param_groups: bias_bn_no_decay

scheduler:
    names: [lr]
    lr:
        name: CosineScheduler
        unit_length: epoch
        kwargs:
            base_value: '@{lr}'
            total_steps: '@{num_epochs}'
            warmup_steps: 5

metric:
    train:
        metric_names: [sce, top1, top5]
        cache_size: 20
    valid:
        metric_names: [sce, top1, top5]
        cache_size: null
    loss: sce
    
    speeds:
        sce: fast
        top1: fast
        top5: fast
    polars:
        sce: min
        top1: max
        top5: max
    ruler: ClassifyRuler

record:
    names: [train, eval]
    train:
        window_size: 100
        sync_cuda: false
    eval:
        window_size: 100
        sync_cuda: false

report:
    plain_freq: 10
    curve_freq: 100
    lr_axis_factor: 1000000

pavi:
    use: false
    writer:
        task: '@{run_name}'
        project: 'default'

mixed:
    train: true
    adabn: false
    valid: true
    loss_scale: 1 #128 #512
    dynamic_scale_init: 4294967296 #(2^32) 
    dynamic_scale_factor: 2. 
    dynamic_scale_window: 1000
    float_bn: True
    #float_module_type: "{torch.nn.Conv2d:('float', 'half')}"
    #float_module_name: "{'fc':('float', 'half')}"