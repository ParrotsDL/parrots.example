dataset: # Required.
  type: coco
  train:
#    meta_file: /mnt/lustre/share/DSK/datasets/mscoco2017/annotations/instances_train2017.json
    meta_file: /mnt/lustre/share/platform/dataset/parrots_test/pod/instances_train2017_short.json
    image_dir: /mnt/lustre/share/DSK/datasets/mscoco2017/train2017
    ceph_image_dir: s3://parrots_model_data/DSK/datasets/mscoco2017/train2017
    flip: True
  test:
    meta_file: /mnt/lustre/share/DSK/datasets/mscoco2017/annotations/instances_val2017.json
    image_dir: /mnt/lustre/share/DSK/datasets/mscoco2017/val2017
    ceph_image_dir: s3://parrots_model_data/DSK/datasets/mscoco2017/val2017
    flip: False
  has_keypoint: False        # don't use keypoints
  has_mask: False            # don't use segmentations
  aspect_grouping: [1, ]     # use group_sampler when loading dataset, comment this line to use normal DistributedSampler
  alignment: 128             # Align size of images to fit FPN. For fpn-faster-rcnn, 32 is enough; for RetinaNet, it's 128.
  scales: [800]              # shorter side of resized image
  max_size: 1333             # longer side of resized image
  pixel_mean: [0.485, 0.456, 0.406] # ImageNet pretrained statics
  pixel_std: [0.229, 0.224, 0.225]
  batch_size: 2
  workers: 4                 # number of workers of dataloader for each process
  evaluator:
    type: COCO
    kwargs:
      gt_file: /mnt/lustre/share/DSK/datasets/mscoco2017/annotations/instances_val2017.json
      iou_types: [bbox]

trainer: # Required.
  max_epoch: 3 #13              # total epochs for the training
  test_freq: 4 #14
  optimizer:                 # optimizer = SGD(params,lr=0.001,momentum=0.9,weight_decay=0.0001)
    type: SGD
    kwargs:
      lr: 0.00125
      momentum: 0.9
      weight_decay: 0.0001
  lr_scheduler:              # lr_scheduler = MultStepLR(optimizer, milestones=[9,14],gamma=0.1)
    warmup_epochs: 1         # set to be 0 to disable warmup. target_lr = init_lr * total_batch_size
    type: MultiStepLR
    kwargs:
      milestones: [8,11]     # epochs to decay lr
      gamma: 0.1             # decay rate

saver: # Required.
  save_dir: checkpoints      # dir to save checkpoints
  pretrain_model: /mnt/lustre/share/DSK/model_zoo/pytorch/imagenet/resnet50-19c8e357.pth
  #resume_model: checkpoints/ckpt_exx.pth
  results_dir: results_dir   # dir to save detection results. i.e., bboxes, masks, keypoints
  #vis_gt:
  #  output_dir: vis_gt
  #vis_dt:
  #  output_dir: vis_dt
  #  bbox_thresh: 0.5


#fp16:
#  keep_batchnorm_fp32: True

net: # Required.
  - name: backbone            # backbone = resnet50(frozen_layers, out_layers, out_strides)
    type: pod.models.backbones.resnet.resnet50
    kwargs:
      frozen_layers: [0, 1]   # layer0...1 is fixed
      out_layers: [3]         # layer1...4, commonly named Conv2...5
      out_strides: [16]       # tell the strides of output features
      normalize:
        type: freeze_bn
  - name: roi_head
    prev: backbone
    type: pod.models.heads.roi_head.NaiveRPN
    kwargs:
      feat_planes: 512        # channels of intermediate conv
      num_classes: 2          # for rpn, it's 2; for RetinaNet, it's 81
      initializer:
        method: normal
        std: 0.01
      cfg:
        cls_loss: softmax
        smooth_l1_sigma: 3.0          #   
        anchor_ratios: [0.5,1,2]      # anchor strides are provided as feature strides by feature extractor
        anchor_scales: [2,4,8,16,32]  # scale of anchors relative to feature map
        nms:
          type: naive             # use vanilla nms
          nms_iou_thresh: 0.7     # nms thresh. Within each level if FPN
        roi_min_size: 2           # minimum scale of a valid roi
        allowed_border: 0
        train: # train only
          matcher:
            ignore_iou_thresh: 0.5        # Required if provide ignore_regions
            positive_iou_thresh: 0.7
            negative_iou_thresh: 0.3
            allow_low_quality_match: True # train only. positive if a anchor has highest iou with any gt 
          sampler:
            type: 'naive'             # choices = {'naive', 'force_keep_ratio', 'keep_all'}
            batch_size: 256           # batch size of sampled anchors of each image
            positive_percent: 0.5     # percent of positives in sampled anchors
          pre_nms_score_thresh: 0.00  # to reduce computation
          pre_nms_top_n: 12000        # number of rois before nms. (within each level if fpn)
          post_nms_top_n: 2000        # number of rois after nms. (within each level if fpn)
        test:
          pre_nms_score_thresh: 0.0   # to reduce computation
          pre_nms_top_n: 6000
          post_nms_top_n: 300
  - name: bbox_head
    prev: backbone
    type: pod.models.heads.bbox_head.Res5
    kwargs:
      backbone: resnet50
      block: Bottleneck
      num_classes: 81                 # number of classification classes
      normalize:
        type: freeze_bn
      cfg:
        smooth_l1_sigma: 1.0          # set as 1000.0 to use L1-loss for bbox head
        roipooling:
          method: 'roialignpool'      # choices=['roialignpool', 'psroipool', 'roipool', 'psroimaskpool']. note that 'psroipool' is for RFCN head
          pool_size: 7
          sampling_ratio: 0           # number of sampling points in each bin. 0 means densely sampled
        bbox_normalize:
          means: [0, 0, 0, 0]         # statics to normalize localization predictions.
          stds: [0.1, 0.1, 0.2, 0.2]
        share_location: False         # is share location in bbox regression for all classes
        train: # train only
          matcher:
            ignore_iou_thresh: 0.5          # Required if provide ignore_regions
            positive_iou_thresh: 0.5
            negative_iou_thresh: 0.5
            allow_low_quality_match: False  # positive if a anchor has highest iou with any gt 
          sampler:
            type: 'naive'
            batch_size: 256
            positive_percent: 0.25
        test:
          nms:
            type: naive               # choices = {'naive', 'soft'}
            nms_iou_thresh: 0.5       # test only
          bbox_score_thresh: 0.0      # test only
          top_n: 100                  # test only, number of bboxes to keep
