version: v3.0.0
num_classes: &num_classes 81
out_strides: &out_strides [4]

flip: &flip
 type: flip
 kwargs:
   flip_p: 0.5

resize: &resize
 type: centernetkp_crop
 kwargs:
   height: 511
   width: 511

crop: &crop
 type: hg_pad

target_transform: &target_transform
 type: centernetkp_keypoint
 kwargs:
   input_size: [511, 511]
   output_strides: *out_strides
   gaussian_bump: true
   gaussian_rad: -1
   gaussian_iou: 0.7
   
jitter: &jitter
 type: color_jitter
 kwargs:
   brightness: 0.4
   contrast: 0.4
   saturation: 0.4
   hue: 0.4
   prob: 0.2

to_tensor: &to_tensor
  type: to_tensor

normalize: &normalize
 type: normalize
 kwargs:
   mean: [0.485, 0.456, 0.406] # ImageNet pretrained statics
   std: [0.229, 0.224, 0.225]

dataset: # Required.
  train:
    dataset:
      type: coco
      kwargs:
        source: train  # dataset id
        meta_file: /mnt/lustre/share/DSK/datasets/mscoco2017/annotations/instances_train2017.json
        image_reader:
          type: ceph_opencv
          kwargs:
            # image_dir: /mnt/lustre/share/DSK/datasets/mscoco2017/train2017
            image_dir: s3://parrots_model_data/DSK/datasets/mscoco2017/train2017
            color_mode: RGB
        transformer: [*flip, *resize, *jitter, *target_transform, *to_tensor, *normalize]
  test:
    dataset:
      type: coco
      kwargs:
        source: val
        meta_file: /mnt/lustre/share/DSK/datasets/mscoco2017/annotations/instances_val2017.json
        image_reader:
          type: ceph_opencv
          kwargs:
            # image_dir: /mnt/lustre/share/DSK/datasets/mscoco2017/val2017
            image_dir: s3://parrots_model_data/DSK/datasets/mscoco2017/val2017
            color_mode: RGB
        transformer: [*crop, *to_tensor, *normalize]
        evaluator:
          type: COCO               # choices = {'COCO', 'VOC', 'MR'}
          kwargs:
            gt_file: /mnt/lustre/share/DSK/datasets/mscoco2017/annotations/instances_val2017.json
            iou_types: [bbox]
  batch_sampler:
    type: aspect_ratio_group
    kwargs:
      sampler:
        type: dist
        kwargs: {}
      batch_size: 12
      aspect_grouping: [1,]
  dataloader:
    type: centernetkp
    kwargs:
      num_workers: 4

trainer: # Required.
  max_epoch: 60              # total epochs for the training
  test_freq: 5
  optimizer:                 # optimizer = SGD(params,lr=0.001,momentum=0.9,weight_decay=0.0001)
    type: SGD
    kwargs:
      lr: 0.0025
      momentum: 0.9
      weight_decay: 0.0001
  lr_scheduler:              # lr_scheduler = MultStepLR(optimizer, milestones=[9,14],gamma=0.1)
    warmup_epochs: 0         # set to be 0 to disable warmup. When warmup,  target_lr = init_lr * total_batch_size
    type: MultiStepLR
    kwargs:
      milestones: [45, 55]     # epochs to decay lr
      gamma: 0.1              # decay rate

saver: # Required.
  save_dir: checkpoints/centernetkp511-R101-60epoch     # dir to save checkpoints
  pretrain_model: /mnt/lustre/share/DSK/model_zoo/pytorch/imagenet/resnet101-5d3b4d8f.pth
  results_dir: results_dir/centernetkp511-R101-60epoch  # dir to save detection results. i.e., bboxes, masks, keypoints
  # auto_resume: True  # find last checkpoint from save_dir and resume from it automatically
                     # this option has the highest priority (auto_resume > opts > resume_model > pretrain_model)


fp16:
  keep_batchnorm_fp32: True
  scale_factor: dynamic


hooks:
  - type: auto_checkpoint
  - type: train_val_logger
    kwargs: 
      freq: 10
      skip_first_k: 5
      logdir: log
      summary_writer: pavi

net:
  - name: backbone              # backbone = resnet101(frozen_layers, out_layers, out_strides)
    type: pod.models.backbones.resnet.resnet101
    kwargs:
      frozen_layers: [0,1]      # layer0...1 is fixed
      out_layers: [1,2,3,4]     # layer1...4, commonly named Conv2...5, layer 5 for fused layer
      out_strides: [4,8,16,32]  # tell the strides of output features
      normalize:
        type: freeze_bn
      initializer:
        method: msra
  - name: cnkp_head
    prev: backbone 
    type: pod.models.heads.centernetkp_head.CenterNetKeyPointHead
    kwargs:
      inplanes: [256]           # channels of intermediate conv
      num_classes: *num_classes # number of classes
      fuse_layers: True
      out_strides: *out_strides
      normalize:
        type: solo_bn
      cfg:
        centernetkp_supervisor:
          type: centernetkp
          kwargs:
            out_strides: *out_strides
        centernetkp_predictor:
          type: centernetkp 
          kwargs:
            out_strides: *out_strides
            num_classes: *num_classes
            top_k: 70           # top k scores from heatmap
            kernel: 3           # key points max pool kernel size
            corner_dist_thresh: 0.5   # corner embedding distance threshold
            num_dets: 1000
            top_n: 100
            nms:
              type: soft
              nms_iou_thresh: 0.5
              softnms_method: gaussian
        cls_loss:
          type: gaussian_sigmoid_focal_loss
          kwargs:
            beta: 4
            gamma: 2
            num_classes: *num_classes
            init_prior: 0.01
        push_loss:
          type: push_loss
          kwargs:
            loss_weight: 0.1
        pull_loss:
          type: pull_loss
          kwargs:
            loss_weight: 0.1
        offset_loss:
          type: smooth_l1_loss
