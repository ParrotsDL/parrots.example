version: v3.0.0
num_classes: &num_classes 81

flip: &flip
 type: flip
 kwargs:
   flip_p: 0.5

resize: &resize
 type: keep_ar_resize
 kwargs:
   scales: [800]
   max_size: 1333

to_tensor: &to_tensor
  type: to_tensor

normalize: &normalize
 type: normalize
 kwargs:
   mean: [0.485, 0.456, 0.406] # ImageNet pretrained statics
   std: [0.229, 0.224, 0.225]

dataset: # Required.
  train:
    dataset:
      type: coco
      kwargs:
        source: train  # dataset id
        lustre_meta_file: /mnt/lustre/share/DSK/datasets/mscoco2017/annotations/instances_train2017.json
        ceph_meta_file: s3://parrots_model_data/DSK/datasets/mscoco2017/annotations/instances_train2017.json
        image_reader:
          # type: fs_opencv
          type: mix_opencv
          kwargs:
            lustre_image_dir: /mnt/lustre/share/DSK/datasets/mscoco2017/train2017
            ceph_image_dir: s3://parrots_model_data/DSK/datasets/mscoco2017/train2017
            color_mode: RGB
        transformer: [*flip, *resize, *to_tensor, *normalize]
  test:
    dataset:
      type: coco
      kwargs:
        source: val
        lustre_meta_file: /mnt/lustre/share/DSK/datasets/mscoco2017/annotations/instances_val2017.json
        ceph_meta_file: s3://parrots_model_data/DSK/datasets/mscoco2017/annotations/instances_val2017.json
        image_reader:
          type: mix_opencv
          kwargs:
            lustre_image_dir: /mnt/lustre/share/DSK/datasets/mscoco2017/val2017
            ceph_image_dir: s3://parrots_model_data/DSK/datasets/mscoco2017/val2017
            color_mode: RGB
        transformer: [*resize, *to_tensor, *normalize]
        evaluator:
          type: COCO               # choices = {'COCO', 'VOC', 'MR'}
          kwargs:
            lustre_gt_file: /mnt/lustre/share/DSK/datasets/mscoco2017/annotations/instances_val2017.json
            ceph_gt_file: s3://parrots_model_data/DSK/datasets/mscoco2017/annotations/instances_val2017.json
            iou_types: [bbox]
  batch_sampler:
    type: aspect_ratio_group
    kwargs:
      sampler:
        type: dist
        kwargs: {}
      batch_size: 2
      aspect_grouping: [1,]
  dataloader:
    type: base
    kwargs:
      num_workers: 4
      alignment: 64


trainer: # Required.
  max_epoch: 14              # total epochs for the training
  test_freq: 14
  optimizer:                 # optimizer = SGD(params,lr=0.001,momentum=0.9,weight_decay=0.0001)
    type: SGD
    kwargs:
      lr: 0.00125
      momentum: 0.9
      weight_decay: 0.0001
  lr_scheduler:              # lr_scheduler = MultStepLR(optimizer, milestones=[9,14],gamma=0.1)
    warmup_epochs: 1         # set to be 0 to disable warmup. When warmup,  target_lr = init_lr * total_batch_size
    type: MultiStepLR
    kwargs:
      milestones: [9,12]     # epochs to decay lr
      gamma: 0.1             # decay rate

saver: # Required.
  save_dir: checkpoints/fcos-R50-1x     # dir to save checkpoints
  lustre_pretrain_model: /mnt/lustre/share/DSK/model_zoo/pytorch/imagenet/resnet50-19c8e357.pth
  ceph_pretrain_model: s3://parrots_model_data/parrots_model_ckpt/model_zoo/resnet50-19c8e357.pth
  results_dir: results_dir/fcos-R50-1x  # dir to save detection results. i.e., bboxes, masks, keypoints
  auto_resume: False  # find last checkpoint from save_dir and resume from it automatically
                     # this option has the highest priority (auto_resume > opts > resume_model > pretrain_model)



hooks:
  - type: auto_checkpoint
  - type: train_val_logger
    kwargs: 
      freq: 10
      skip_first_k: 5
      logdir: log
      summary_writer: pavi


net:
  - name: backbone              # backbone = resnet50(frozen_layers, out_layers, out_strides)
    type: pod.models.backbones.resnet50
    kwargs:
      frozen_layers: [0,1]     # layer0...1 is fixed
      out_layers: [2,3,4]       # layer1...4, commonly named Conv2...5
      out_strides: [8,16,32]    # tell the strides of output features
      normalize:
        type: freeze_bn
      initializer:
        method: msra
  - name: neck
    prev: backbone
    type: pod.models.necks.fpn.FPN
    kwargs:
      outplanes: 256
      start_level: 3
      num_level: 5                # if num_level>len(backbone.out_layers), additional conv with be stacked.
      out_strides: [8,16,32,64,128] # strides of output features. aka., anchor strides for roi_head
      downsample: conv            # method to downsample, for FPN, it's pool, for RetienaNet, it's conv
      upsample: nearest           # method to interp, nearest or bilinear
      initializer:
        method: xavier
  - name: roi_head
    prev: neck
    type: pod.models.heads.fcos_head.FcosHead
    kwargs:
      feat_planes: 256        # channels of intermediate conv
      num_classes: *num_classes  # number of classes including backgroudn. for rpn, it's 2; for RetinaNet, it's 81
      dense_points: &dense_points 1
      loc_ranges: [[-1, 64], [64, 128], [128, 256], [256, 512], [512, 100000]]
      initializer:
        method: normal
        std: 0.01
      num_conv: 4
      normalize:
        type: gn
        kwargs:
          num_groups: 32
      cfg:
        loc_loss:
          type: iou_loss
          kwargs:
            loss_type: iou
        cls_loss:
          type: sigmoid_focal_loss
          kwargs:
            alpha: 0.25
            gamma: 2.0
            init_prior: 0.01
            num_classes: *num_classes
        center_loss:
          type: sigmoid_cross_entropy
        center_generator:
          type: fcos
          kwargs:
            dense_points: *dense_points
        fcos_supervisor:
          type: fcos
          kwargs:
            matcher:
              type: fcos
              kwargs: {}
        fcos_predictor:
          type: fcos
          kwargs:
            pre_nms_score_thresh: 0.05  # to reduce computation
            pre_nms_top_n: 6000
            post_nms_top_n: 1000
            roi_min_size: 0               # minimum scale of a valid roi
            merger:
              type: retina
              kwargs:
                top_n: 100
                nms:
                  type: naive
                  nms_iou_thresh: 0.5     # Required in RetinaNet. DO not nms in FPN across levels
