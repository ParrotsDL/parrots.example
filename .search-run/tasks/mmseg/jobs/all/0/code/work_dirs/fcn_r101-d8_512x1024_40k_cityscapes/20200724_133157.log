2020-07-24 13:31:57,140 - mmseg - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.6.8 |Anaconda, Inc.| (default, Dec 30 2018, 01:22:34) [GCC 7.3.0]
CUDA available: True
CUDA_HOME: /mnt/cache/share/platform/dep/cuda-9.0-cudnn7.6
NVCC: Cuda compilation tools, release 9.0, V9.0.176
GPU 0,1,2,3: Tesla V100-SXM2-32GB
GCC: gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-36)
PyTorch: parrots
PyTorch compiling details: {'c_compiler': '/usr/bin/cc', 'cuda_include_dirs': '/mnt/cache/share/platform/dep/cuda-9.0-cudnn7.6/include', 'cuda_libraries': '/mnt/cache/share/platform/dep/cuda-9.0-cudnn7.6/lib64/libcudart_static.a -lpthread dl /usr/lib64/librt.so', 'cxx_flags': '-std=c++11 -Wall', 'mpi_include_path': '/mnt/cache/share/platform/dep/openmpi-2.1.6-cuda9.0/include', 'mpi_libraries': '/mnt/cache/share/platform/dep/openmpi-2.1.6-cuda9.0/lib/libmpi.so', 'nccl_include': '/mnt/cache/share/platform/dep/nccl-2.4.7-cuda9.0/include', 'nccl_libraries': '/mnt/cache/share/platform/dep/nccl-2.4.7-cuda9.0/lib/libnccl.so', 'nvcc_flags': ' -gencode arch=compute_60,code=sm_60 -gencode arch=compute_61,code=sm_61 -gencode arch=compute_70,code=sm_70 -gencode arch=compute_70,code=compute_70', 'nvcc_path': '/mnt/cache/share/platform/dep/cuda-9.0-cudnn7.6/bin'}
TorchVision: 0.4.0a0+d374af3
OpenCV: 4.1.1
MMCV: 1.0.2
MMSegmentation: 0.5.0+1af2ad6
MMCV Compiler: GCC 4.8.5 20150623 (Red Hat 4.8.5-36)
MMCV CUDA Compiler: 9.0
------------------------------------------------------------

2020-07-24 13:31:57,141 - mmseg - INFO - Distributed training: True
2020-07-24 13:31:57,478 - mmseg - INFO - Config:
norm_cfg = dict(type='SyncBN', requires_grad=True)
model = dict(
    type='EncoderDecoder',
    pretrained=
    '/mnt/lustre/share_data/maxiaoming/pretrain_model/resnet101c128_csail-159f67a3.pth',
    backbone=dict(
        type='ResNetV1c',
        depth=101,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        dilations=(1, 1, 2, 4),
        strides=(1, 2, 1, 1),
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        norm_eval=False,
        style='pytorch',
        contract_dilation=True),
    decode_head=dict(
        type='FCNHead',
        in_channels=2048,
        in_index=3,
        channels=512,
        num_convs=2,
        concat_input=True,
        dropout_ratio=0.1,
        num_classes=19,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    auxiliary_head=dict(
        type='FCNHead',
        in_channels=1024,
        in_index=2,
        channels=256,
        num_convs=1,
        concat_input=False,
        dropout_ratio=0.1,
        num_classes=19,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)))
train_cfg = dict()
test_cfg = dict(mode='whole')
dataset_type = 'CityscapesDataset'
data_root = '/mnt/lustre/share_data/maxiaoming/data/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
crop_size = (512, 1024)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),
    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_semantic_seg'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(2048, 1024),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=2,
    workers_per_gpu=2,
    train=dict(
        type='CityscapesDataset',
        data_root='/mnt/lustre/share_data/maxiaoming/data/',
        img_dir='leftImg8bit/train',
        ann_dir='gtFine/train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(
                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),
            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_semantic_seg'])
        ]),
    val=dict(
        type='CityscapesDataset',
        data_root='/mnt/lustre/share_data/maxiaoming/data/',
        img_dir='leftImg8bit/val',
        ann_dir='gtFine/val',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CityscapesDataset',
        data_root='/mnt/lustre/share_data/maxiaoming/data/',
        img_dir='leftImg8bit/val',
        ann_dir='gtFine/val',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
log_config = dict(
    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
cudnn_benchmark = True
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)
optimizer_config = dict()
lr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)
total_iters = 40000
checkpoint_config = dict(by_epoch=False, interval=4000)
evaluation = dict(interval=4000, metric='mIoU')
work_dir = './work_dirs/fcn_r101-d8_512x1024_40k_cityscapes'
gpu_ids = range(0, 1)

2020-07-24 13:31:57,478 - mmseg - INFO - Set random seed to 0, deterministic: False
2020-07-24 13:31:59,604 - mmseg - WARNING - The model and loaded state dict do not match exactly

size mismatch for stem.0.weight: copying a param of (64, 3, 3, 3) from checkpoint, where the shape is (32, 3, 3, 3) in current model.
size mismatch for stem.1.weight: copying a param of (64,) from checkpoint, where the shape is (32,) in current model.
size mismatch for stem.1.bias: copying a param of (64,) from checkpoint, where the shape is (32,) in current model.
size mismatch for stem.1.running_mean: copying a param of (64,) from checkpoint, where the shape is (32,) in current model.
size mismatch for stem.1.running_var: copying a param of (64,) from checkpoint, where the shape is (32,) in current model.
size mismatch for stem.3.weight: copying a param of (64, 64, 3, 3) from checkpoint, where the shape is (32, 32, 3, 3) in current model.
size mismatch for stem.4.weight: copying a param of (64,) from checkpoint, where the shape is (32,) in current model.
size mismatch for stem.4.bias: copying a param of (64,) from checkpoint, where the shape is (32,) in current model.
size mismatch for stem.4.running_mean: copying a param of (64,) from checkpoint, where the shape is (32,) in current model.
size mismatch for stem.4.running_var: copying a param of (64,) from checkpoint, where the shape is (32,) in current model.
size mismatch for stem.6.weight: copying a param of (128, 64, 3, 3) from checkpoint, where the shape is (64, 32, 3, 3) in current model.
size mismatch for stem.7.weight: copying a param of (128,) from checkpoint, where the shape is (64,) in current model.
size mismatch for stem.7.bias: copying a param of (128,) from checkpoint, where the shape is (64,) in current model.
size mismatch for stem.7.running_mean: copying a param of (128,) from checkpoint, where the shape is (64,) in current model.
size mismatch for stem.7.running_var: copying a param of (128,) from checkpoint, where the shape is (64,) in current model.
size mismatch for layer1.0.conv1.weight: copying a param of (64, 128, 1, 1) from checkpoint, where the shape is (64, 64, 1, 1) in current model.
size mismatch for layer1.0.downsample.0.weight: copying a param of (256, 128, 1, 1) from checkpoint, where the shape is (256, 64, 1, 1) in current model.
unexpected key in source state_dict: fc.weight, fc.bias

2020-07-24 13:31:59,605 - mmseg - INFO - EncoderDecoder(
  (backbone): ResNetV1c(
    (stem): Sequential(
      (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (1): SyncBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): SyncBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
    )
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
    )
    (layer2): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
    )
    (layer3): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (6): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (7): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (8): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (9): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (10): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (11): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (12): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (13): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (14): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (15): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (16): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (17): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (18): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (19): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (20): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (21): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (22): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
    )
    (layer4): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
        (bn2): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
        (bn2): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
      )
    )
  )
  (decode_head): FCNHead(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): CrossEntropyLoss()
    (conv_seg): Conv2d(512, 19, kernel_size=(1, 1), stride=(1, 1))
    (dropout): Dropout2d(p=0.1)
    (convs): Sequential(
      (0): ConvModule(
        (conv): Conv2d(2048, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace)
      )
      (1): ConvModule(
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace)
      )
    )
    (conv_cat): ConvModule(
      (conv): Conv2d(2560, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (activate): ReLU(inplace)
    )
  )
  (auxiliary_head): FCNHead(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): CrossEntropyLoss()
    (conv_seg): Conv2d(256, 19, kernel_size=(1, 1), stride=(1, 1))
    (dropout): Dropout2d(p=0.1)
    (convs): Sequential(
      (0): ConvModule(
        (conv): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace)
      )
    )
  )
)
2020-07-24 13:31:59,685 - mmseg - INFO - Loaded 2975 images
2020-07-24 13:32:03,495 - mmseg - INFO - Loaded 500 images
2020-07-24 13:32:03,496 - mmseg - INFO - Start running, host: maxiaoming@SH-IDC1-10-198-4-49, work_dir: /mnt/lustre/maxiaoming/mmsegbenck/auto/parrots.test/.search-run/tasks/mmseg/jobs/all/0/code/work_dirs/fcn_r101-d8_512x1024_40k_cityscapes
2020-07-24 13:32:03,497 - mmseg - INFO - workflow: [('train', 1)], max: 40000 iters
2020-07-24 13:33:06,888 - mmseg - INFO - Iter [50/40000]	lr: 9.989e-03, eta: 13:36:21, time: 1.226, data_time: 0.001, memory: 12582, decode.loss_seg: 1.5493, decode.acc_seg: 49.2089, aux.loss_seg: 0.7645, aux.acc_seg: 38.4255, loss: 2.3139
2020-07-24 13:33:42,721 - mmseg - INFO - Iter [100/40000]	lr: 9.978e-03, eta: 10:45:59, time: 0.717, data_time: 0.013, memory: 12582, decode.loss_seg: 1.0192, decode.acc_seg: 64.8751, aux.loss_seg: 0.4833, aux.acc_seg: 60.2106, loss: 1.5025
2020-07-24 13:34:19,128 - mmseg - INFO - Iter [150/40000]	lr: 9.967e-03, eta: 9:51:17, time: 0.728, data_time: 0.011, memory: 12582, decode.loss_seg: 0.8707, decode.acc_seg: 68.8561, aux.loss_seg: 0.3835, aux.acc_seg: 67.4955, loss: 1.2542
2020-07-24 13:34:55,420 - mmseg - INFO - Iter [200/40000]	lr: 9.956e-03, eta: 9:23:16, time: 0.726, data_time: 0.013, memory: 12582, decode.loss_seg: 0.8904, decode.acc_seg: 68.7158, aux.loss_seg: 0.3740, aux.acc_seg: 68.6468, loss: 1.2644
2020-07-24 13:35:32,441 - mmseg - INFO - Iter [250/40000]	lr: 9.945e-03, eta: 9:08:08, time: 0.740, data_time: 0.011, memory: 12582, decode.loss_seg: 0.7697, decode.acc_seg: 71.8177, aux.loss_seg: 0.3329, aux.acc_seg: 71.0296, loss: 1.1026
2020-07-24 13:36:08,700 - mmseg - INFO - Iter [300/40000]	lr: 9.933e-03, eta: 8:56:13, time: 0.726, data_time: 0.012, memory: 12582, decode.loss_seg: 0.7045, decode.acc_seg: 73.8990, aux.loss_seg: 0.3136, aux.acc_seg: 72.9133, loss: 1.0181
2020-07-24 13:36:45,063 - mmseg - INFO - Iter [350/40000]	lr: 9.922e-03, eta: 8:47:38, time: 0.727, data_time: 0.012, memory: 12582, decode.loss_seg: 0.6543, decode.acc_seg: 74.5142, aux.loss_seg: 0.2891, aux.acc_seg: 74.0782, loss: 0.9433
2020-07-24 13:37:22,281 - mmseg - INFO - Iter [400/40000]	lr: 9.911e-03, eta: 8:42:31, time: 0.744, data_time: 0.012, memory: 12582, decode.loss_seg: 0.5837, decode.acc_seg: 76.0357, aux.loss_seg: 0.2684, aux.acc_seg: 74.6852, loss: 0.8521
2020-07-24 13:37:59,315 - mmseg - INFO - Iter [450/40000]	lr: 9.900e-03, eta: 8:38:08, time: 0.741, data_time: 0.020, memory: 12582, decode.loss_seg: 0.5732, decode.acc_seg: 77.1187, aux.loss_seg: 0.2671, aux.acc_seg: 75.8564, loss: 0.8403
2020-07-24 13:38:35,078 - mmseg - INFO - Iter [500/40000]	lr: 9.889e-03, eta: 8:32:49, time: 0.715, data_time: 0.011, memory: 12582, decode.loss_seg: 0.5359, decode.acc_seg: 78.1490, aux.loss_seg: 0.2505, aux.acc_seg: 76.8813, loss: 0.7864
2020-07-24 13:39:10,889 - mmseg - INFO - Iter [550/40000]	lr: 9.878e-03, eta: 8:28:25, time: 0.716, data_time: 0.011, memory: 12582, decode.loss_seg: 0.5301, decode.acc_seg: 78.1956, aux.loss_seg: 0.2377, aux.acc_seg: 77.5975, loss: 0.7678
2020-07-24 13:39:46,880 - mmseg - INFO - Iter [600/40000]	lr: 9.866e-03, eta: 8:24:51, time: 0.720, data_time: 0.012, memory: 12582, decode.loss_seg: 0.5392, decode.acc_seg: 79.1941, aux.loss_seg: 0.2426, aux.acc_seg: 78.2655, loss: 0.7818
2020-07-24 13:40:23,133 - mmseg - INFO - Iter [650/40000]	lr: 9.855e-03, eta: 8:21:59, time: 0.725, data_time: 0.011, memory: 12582, decode.loss_seg: 0.5030, decode.acc_seg: 79.0203, aux.loss_seg: 0.2333, aux.acc_seg: 77.6616, loss: 0.7363
2020-07-24 13:40:59,315 - mmseg - INFO - Iter [700/40000]	lr: 9.844e-03, eta: 8:19:24, time: 0.724, data_time: 0.013, memory: 12582, decode.loss_seg: 0.5137, decode.acc_seg: 77.9531, aux.loss_seg: 0.2301, aux.acc_seg: 77.1191, loss: 0.7438
2020-07-24 13:41:36,234 - mmseg - INFO - Iter [750/40000]	lr: 9.833e-03, eta: 8:17:43, time: 0.738, data_time: 0.012, memory: 12582, decode.loss_seg: 0.5118, decode.acc_seg: 78.7163, aux.loss_seg: 0.2275, aux.acc_seg: 77.8987, loss: 0.7393
2020-07-24 13:42:13,266 - mmseg - INFO - Iter [800/40000]	lr: 9.822e-03, eta: 8:15:40, time: 0.726, data_time: 0.012, memory: 12582, decode.loss_seg: 0.5011, decode.acc_seg: 79.1638, aux.loss_seg: 0.2270, aux.acc_seg: 78.1786, loss: 0.7281
2020-07-24 13:42:49,861 - mmseg - INFO - Iter [850/40000]	lr: 9.811e-03, eta: 8:14:34, time: 0.746, data_time: 0.027, memory: 12582, decode.loss_seg: 0.4620, decode.acc_seg: 80.6718, aux.loss_seg: 0.2091, aux.acc_seg: 79.9058, loss: 0.6711
2020-07-24 13:43:25,721 - mmseg - INFO - Iter [900/40000]	lr: 9.800e-03, eta: 8:12:27, time: 0.717, data_time: 0.011, memory: 12582, decode.loss_seg: 0.5012, decode.acc_seg: 78.3693, aux.loss_seg: 0.2252, aux.acc_seg: 77.6895, loss: 0.7264
2020-07-24 13:44:02,459 - mmseg - INFO - Iter [950/40000]	lr: 9.788e-03, eta: 8:11:07, time: 0.735, data_time: 0.012, memory: 12582, decode.loss_seg: 0.4572, decode.acc_seg: 80.6148, aux.loss_seg: 0.2127, aux.acc_seg: 79.4195, loss: 0.6699
2020-07-24 13:44:38,624 - mmseg - INFO - Exp name: fcn_r101-d8_512x1024_40k_cityscapes.py
2020-07-24 13:44:38,660 - mmseg - INFO - Iter [1000/40000]	lr: 9.777e-03, eta: 8:09:28, time: 0.723, data_time: 0.011, memory: 12582, decode.loss_seg: 0.4289, decode.acc_seg: 80.2319, aux.loss_seg: 0.1978, aux.acc_seg: 79.3318, loss: 0.6266
2020-07-24 13:45:14,239 - mmseg - INFO - Iter [1050/40000]	lr: 9.766e-03, eta: 8:07:34, time: 0.712, data_time: 0.012, memory: 12582, decode.loss_seg: 0.4676, decode.acc_seg: 79.7208, aux.loss_seg: 0.2099, aux.acc_seg: 78.9225, loss: 0.6776
2020-07-24 13:45:50,887 - mmseg - INFO - Iter [1100/40000]	lr: 9.755e-03, eta: 8:06:24, time: 0.733, data_time: 0.013, memory: 12582, decode.loss_seg: 0.4122, decode.acc_seg: 81.8877, aux.loss_seg: 0.1885, aux.acc_seg: 80.7940, loss: 0.6007
2020-07-24 13:46:27,305 - mmseg - INFO - Iter [1150/40000]	lr: 9.744e-03, eta: 8:05:10, time: 0.728, data_time: 0.012, memory: 12582, decode.loss_seg: 0.3965, decode.acc_seg: 81.6918, aux.loss_seg: 0.1827, aux.acc_seg: 80.6196, loss: 0.5792
2020-07-24 13:47:03,274 - mmseg - INFO - Iter [1200/40000]	lr: 9.733e-03, eta: 8:03:44, time: 0.719, data_time: 0.011, memory: 12582, decode.loss_seg: 0.4194, decode.acc_seg: 80.5144, aux.loss_seg: 0.1895, aux.acc_seg: 79.6171, loss: 0.6090
2020-07-24 13:47:39,959 - mmseg - INFO - Iter [1250/40000]	lr: 9.721e-03, eta: 8:02:45, time: 0.734, data_time: 0.012, memory: 12582, decode.loss_seg: 0.4152, decode.acc_seg: 80.8176, aux.loss_seg: 0.1851, aux.acc_seg: 80.1735, loss: 0.6002
2020-07-24 13:48:15,736 - mmseg - INFO - Iter [1300/40000]	lr: 9.710e-03, eta: 8:01:20, time: 0.716, data_time: 0.013, memory: 12582, decode.loss_seg: 0.4248, decode.acc_seg: 80.9053, aux.loss_seg: 0.1943, aux.acc_seg: 79.9795, loss: 0.6191
2020-07-24 13:48:51,996 - mmseg - INFO - Iter [1350/40000]	lr: 9.699e-03, eta: 8:00:12, time: 0.725, data_time: 0.012, memory: 12582, decode.loss_seg: 0.3769, decode.acc_seg: 82.6189, aux.loss_seg: 0.1745, aux.acc_seg: 81.6049, loss: 0.5514
2020-07-24 13:49:28,931 - mmseg - INFO - Iter [1400/40000]	lr: 9.688e-03, eta: 7:59:26, time: 0.739, data_time: 0.011, memory: 12582, decode.loss_seg: 0.4232, decode.acc_seg: 80.8053, aux.loss_seg: 0.1880, aux.acc_seg: 80.1746, loss: 0.6113
2020-07-24 13:50:04,873 - mmseg - INFO - Iter [1450/40000]	lr: 9.677e-03, eta: 7:58:13, time: 0.719, data_time: 0.012, memory: 12582, decode.loss_seg: 0.4026, decode.acc_seg: 81.6442, aux.loss_seg: 0.1826, aux.acc_seg: 80.8077, loss: 0.5852
2020-07-24 13:50:41,510 - mmseg - INFO - Iter [1500/40000]	lr: 9.665e-03, eta: 7:57:21, time: 0.733, data_time: 0.011, memory: 12582, decode.loss_seg: 0.4163, decode.acc_seg: 82.0122, aux.loss_seg: 0.1875, aux.acc_seg: 81.2425, loss: 0.6038
2020-07-24 13:51:17,748 - mmseg - INFO - Iter [1550/40000]	lr: 9.654e-03, eta: 7:56:20, time: 0.725, data_time: 0.012, memory: 12582, decode.loss_seg: 0.4114, decode.acc_seg: 81.1578, aux.loss_seg: 0.1856, aux.acc_seg: 80.2767, loss: 0.5970
2020-07-24 13:51:53,866 - mmseg - INFO - Iter [1600/40000]	lr: 9.643e-03, eta: 7:55:18, time: 0.722, data_time: 0.011, memory: 12582, decode.loss_seg: 0.3842, decode.acc_seg: 81.4217, aux.loss_seg: 0.1746, aux.acc_seg: 80.5864, loss: 0.5588
2020-07-24 13:52:30,191 - mmseg - INFO - Iter [1650/40000]	lr: 9.632e-03, eta: 7:54:22, time: 0.726, data_time: 0.012, memory: 12582, decode.loss_seg: 0.3824, decode.acc_seg: 82.4350, aux.loss_seg: 0.1765, aux.acc_seg: 81.1919, loss: 0.5589
2020-07-24 13:53:06,122 - mmseg - INFO - Iter [1700/40000]	lr: 9.621e-03, eta: 7:53:18, time: 0.719, data_time: 0.013, memory: 12582, decode.loss_seg: 0.3866, decode.acc_seg: 81.9146, aux.loss_seg: 0.1737, aux.acc_seg: 81.1039, loss: 0.5603
2020-07-24 13:53:42,301 - mmseg - INFO - Iter [1750/40000]	lr: 9.610e-03, eta: 7:52:22, time: 0.724, data_time: 0.011, memory: 12582, decode.loss_seg: 0.4051, decode.acc_seg: 81.7446, aux.loss_seg: 0.1846, aux.acc_seg: 80.7139, loss: 0.5896
2020-07-24 13:54:18,921 - mmseg - INFO - Iter [1800/40000]	lr: 9.598e-03, eta: 7:51:36, time: 0.733, data_time: 0.013, memory: 12582, decode.loss_seg: 0.3655, decode.acc_seg: 83.1225, aux.loss_seg: 0.1674, aux.acc_seg: 82.0725, loss: 0.5330
2020-07-24 13:54:55,241 - mmseg - INFO - Iter [1850/40000]	lr: 9.587e-03, eta: 7:50:44, time: 0.726, data_time: 0.011, memory: 12582, decode.loss_seg: 0.3885, decode.acc_seg: 81.5858, aux.loss_seg: 0.1752, aux.acc_seg: 80.6956, loss: 0.5638
2020-07-24 13:55:33,655 - mmseg - INFO - Iter [1900/40000]	lr: 9.576e-03, eta: 7:50:35, time: 0.768, data_time: 0.013, memory: 12582, decode.loss_seg: 0.3848, decode.acc_seg: 81.7302, aux.loss_seg: 0.1756, aux.acc_seg: 80.6702, loss: 0.5604
2020-07-24 13:56:10,571 - mmseg - INFO - Iter [1950/40000]	lr: 9.565e-03, eta: 7:49:55, time: 0.738, data_time: 0.012, memory: 12582, decode.loss_seg: 0.3467, decode.acc_seg: 82.9580, aux.loss_seg: 0.1590, aux.acc_seg: 81.9409, loss: 0.5056
2020-07-24 13:56:46,990 - mmseg - INFO - Exp name: fcn_r101-d8_512x1024_40k_cityscapes.py
2020-07-24 13:56:47,029 - mmseg - INFO - Iter [2000/40000]	lr: 9.554e-03, eta: 7:49:06, time: 0.729, data_time: 0.013, memory: 12582, decode.loss_seg: 0.3717, decode.acc_seg: 82.9026, aux.loss_seg: 0.1654, aux.acc_seg: 82.2293, loss: 0.5372
2020-07-24 13:57:23,720 - mmseg - INFO - Iter [2050/40000]	lr: 9.542e-03, eta: 7:48:23, time: 0.734, data_time: 0.012, memory: 12582, decode.loss_seg: 0.3667, decode.acc_seg: 82.3407, aux.loss_seg: 0.1676, aux.acc_seg: 81.2995, loss: 0.5344
2020-07-24 13:58:00,517 - mmseg - INFO - Iter [2100/40000]	lr: 9.531e-03, eta: 7:47:42, time: 0.736, data_time: 0.014, memory: 12582, decode.loss_seg: 0.3595, decode.acc_seg: 82.4275, aux.loss_seg: 0.1638, aux.acc_seg: 81.5368, loss: 0.5233
